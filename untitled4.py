# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XCNpqBXa8xQVuv7cm5XPGN5E2_llednP
"""

# Thư viện xử lý dữ liệu
import pandas as pd
import numpy as np

# Thư viện trực quan hóa
import matplotlib.pyplot as plt
import seaborn as sns

# Thư viện machine learning
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

import pandas as pd

# Đọc file vừa upload (đảm bảo tên đúng)
df = pd.read_csv("milk_tea_sales_sample.csv")

# Hiển thị 5 dòng đầu tiên
df.head()

df.info()

df.isnull().sum()

print("Số dòng trùng lặp:", df.duplicated().sum())

df['date'] = pd.to_datetime(df['date'])

df.info()
df.head()

import matplotlib.pyplot as plt

plt.figure(figsize=(12, 6))
plt.plot(df['date'], df['sales'], label='Sales')
plt.title('Milk Tea Sales Over Time')
plt.xlabel('Date')
plt.ylabel('Sales')
plt.grid(True)
plt.legend()
plt.show()

import seaborn as sns

plt.figure(figsize=(10, 6))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

# Cuối tuần
sns.boxplot(x='is_weekend', y='sales', data=df)
plt.title('Sales vs Weekend')
plt.show()

# Ngày lễ
sns.boxplot(x='is_holiday', y='sales', data=df)
plt.title('Sales vs Holiday')
plt.show()

# Khuyến mãi
sns.boxplot(x='promotion', y='sales', data=df)
plt.title('Sales vs Promotion')
plt.show()

# Nhiệt độ vs Sales
sns.scatterplot(x='temperature', y='sales', data=df)
plt.title('Temperature vs Sales')
plt.show()

# Mưa vs Sales
sns.scatterplot(x='rain_mm', y='sales', data=df)
plt.title('Rain vs Sales')
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

# Tạo cột mới: Thứ trong tuần từ cột 'date' (0=Monday, 6=Sunday)
df['day_of_week'] = df['date'].dt.dayofweek

# Đặt tên thứ trong tuần để dễ đọc
day_names = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
df['day_name'] = df['day_of_week'].apply(lambda x: day_names[x])

# Tính doanh số trung bình theo từng thứ
avg_sales_by_day = df.groupby('day_name')['sales'].mean().reindex(day_names)

# Vẽ biểu đồ
plt.figure(figsize=(10,6))
sns.barplot(x=avg_sales_by_day.index, y=avg_sales_by_day.values, palette="viridis")
plt.title('Average Sales by Day of the Week')
plt.xlabel('Day of Week')
plt.ylabel('Average Sales')
plt.grid(axis='y')
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

# 1. Chọn các biến đầu vào và biến mục tiêu
features = ['temperature', 'rain_mm', 'is_weekend', 'is_holiday', 'promotion']
target = 'sales'

X = df[features]
y = df[target]

# 2. Chia dữ liệu thành 80% train, 20% test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 3. Khởi tạo mô hình và huấn luyện
model = LinearRegression()
model.fit(X_train, y_train)

# 4. Dự đoán trên tập kiểm tra
y_pred = model.predict(X_test)

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import numpy as np

mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)

print(f"🔎 Mean Absolute Error (MAE): {mae:.2f}")
print(f"🔎 Root Mean Squared Error (RMSE): {rmse:.2f}")
print(f"🔎 R-squared (R²): {r2:.2f}")

import matplotlib.pyplot as plt
import streamlit as st

# Tạo figure và axes
fig, ax = plt.subplots(figsize=(10,6))

ax.plot(y_test.values, label='Actual Sales', marker='o')
ax.plot(y_pred, label='Predicted Sales', marker='x')
ax.set_title('Actual vs Predicted Sales')
ax.set_xlabel('Test Sample Index')
ax.set_ylabel('Sales')
ax.legend()
ax.grid(True)

# Hiển thị lên Streamlit
st.pyplot(fig)
